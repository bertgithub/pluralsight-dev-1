STL:

count:
int nos = count(begin(v), end(v), 2); //return the number of 2's in the vector.

count_if:
//count odd
int odd = count_if(begin(v), end(v), [](int elem){ return elem % 2 != 0; });

map<int, int> monthlengths{ {1,31},  {1,28}, {1,31}, {1,30}, {1,31}, {1,30}, {1,31}, {1,31}, {1,30}, {1,31}, {1,30}, {1,31}};
int longmonths = count_if(begin(monthlengths), end(monthlenghts), [](auto elem) { return elem.second == 31});

//check for odd nums
bool all_of = all_of(begin(v), end(v), [] (int elem) { return elem % 2 != 0; });
bool any_of = any_of(begin(v), end(v), [] (int elem) { return elem % 2 != 0; });
bool none_of = none_of(begin(v), end(v), [] (int elem) { return elem % 2 != 0; });

find_if_not // same as !find_if
find_first_of //find first
search //search for subsequence
find_end //last occurence of subsequence
search_n //n occurences of elem value
adjacent_find //find first occurence of adjacent equal values.


sort:
by default uses operator<

sort(begin(v), end(v));
sort(begin(v), end(v), [](int elem1, elem2) { return elem1 > elem2; }); //sorting in decreasing order
is_sorted //tells you if the collection is sorted.

int high = *max_element(begin(v), end(v));
int low = *min_element(begin(v), end(v));

int positive = *upper_bound(begin(v), end(v), 0); //return the first element > 0
int negative = *lower_bound(begin(v), end(v), 0); //return the first element < 0


shuffle:
#include<random>

//create a collection e.g vector
//create a random device
random_device randomdevice;
//create a mersenne twister to use as random generator
mt19937 generator(randomdevice());
//shuffle the collection
shuffle(it1, it2, generator);

partial sort:
//for collection 1,5,4,2,9,7
//calling partial sort for the first three elements returns 1,2,4,9,5,7 
partial_sort(itf, itm, ite); //elems are sorted from first(itf) to middle(itm), other elems are unsorted

is_sorted(it1, it2); returns iter of first unsorted elem
partial_sort_copy(it1, it2, cit1, cit2); //sorted elems from it1-it2 are copied to cit1-cit2

stable_sort:
//if you want to sort a collection twice
//first by salary using sort
//next by name using stabe_sort
//will result in a sorted collection by salary(members with same salary will be sorted by name)


equal & mismatch:
bool same = equal(begin(v), end(v), begin(v2), end(v2));

auto firstchange = mismatch(begin(v), end(v), begin(v2));//takes only 3 iters
//returns firstchange which is a pair of iters
int avalue = *(firstchange.first);
int bvalue = *(firstchange.second);

//to get position firstchange.first-begin(v) OR firstchange.second-begin(v2)

total of a collection:
int total = accumulate(begin(v), end(v), 0) ; //0 is the init value
//return accumulated even numbers only even
int total = accumulate(begin(v), end(v),0/*init val*/ [](int total/*init value*/, int elem){ if(elem%2 == 0) return total + elem; return total; });

//return elements multiplied
int total = accumulate(begin(v), end(v),1/*init val*/, [](int total/*init value*/, int elem){ return total*elem; });




nth element:
//sorting elements according to position
//e.g 1,5,4,2,9,7,3,8,2
nth_element(begin(v), begin(v)+4, end(v));
//will result in 1,2,2,3,(4),5,7,8,9. elems are sorted < (4) > 

copy:
copy(begin(v), end(v), begin(v2));
OR
auto v3 = v;

auto pos = find(being(v), end(v), 1); // find pos of 1
vector<int> v4(v.size());
//for v{3,6,1,0,-2,5};
copy(begin(v), position, begin(bv4));
//position points to end(not included
//copying 3,6 only to v4

copy_if(begin(v), end(v), begin(v4), [](int elem) { return elem%2 == 0});
//results in 6,0,-2,0,0,0

copy_n(begin(v), 3, begin(v4));
//will copy the first 3 elems v->v4

int position=1
copy(begin(v), position+1, position+1);
//for v{3,6,1,0,-2,5};
will return 3,6,1,3,6,1

copy_backword(begin(v), end(v), end(v4);

remove elements does not change size.
v.erase(remove(begin(v), end(v), 3), end(v)); //remove all elements with value 3, then erase the leftover


filling collections:
vector<int> v(10); //note you have to allocate first for fill, iota...
fill(begin(v), end(v), 1); //fill all with 1
fill_n(begin(v), 6, 2); //fill first 6 elems with 2
//use include <numeric> for iota
iota(begin(v), end(v),1); //starting with 1, fill each elem with +1 from previous

//generate uses a lambda to fill the collection
int index=10;
generate(begin(v), end(v), [&index] () { return --index; });
//fills with 9->0

index = 1;
generate_n(begin(v), 7, [index&]() { return index*2; });
//fills 1,2,4,8....

replace(begin), end(v), 2, 7); //replaces 2 with 7
replace_if(begin(v), end(v), [](int elem){ return elem < 16; }, 7); //replace elements , 16 with 7

transforming an element in place:
transform(begin(v), end(v), [](int elem){ return elem*2; });
transform(begin(v), end(v)-1, begin(v)+1, begin(v6), (int elem1, int elem2) { return elem2 - elem1; });

removing duplicates
v.erase(v.unique(begin(v), end(v)), end(v));

//use unique_copy to copy all unique elements. note on sorted elements only
unique_copy(begin(v), end(v), begin(v7));

reversing elements
reverse(begin(v), end(v));
iter_swap(begin(v), end(v)-1)); //swapping elems first and last
reverse_copy(begin(v), end(v), begin(v2));

to fill without allocating first:
vector<int> v;
fill(back_inserter(v), 6, 2); //insert 6 elems with value 2
generate_n(back_inserter(v), 10, [n=0]() mutable {return n++; }); //note: n=0 is the same as alias capture of n

//inserting in front
deque<int> v;
fill(fron_inserter(v), 6, 2); //insert 6 elems with value 2
generate_n(fron_inserter(v), 10, [n=0]() mutable {return n++; }); //note: n=0 is the same as alias capture of n

